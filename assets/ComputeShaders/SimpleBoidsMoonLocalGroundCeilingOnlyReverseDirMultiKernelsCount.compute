#pragma kernel SimulateCSGround
#pragma kernel SimulateCSCeiling

#pragma kernel SimulateCSCountBoids

// 스레드 그룹의 스레드 사이즈
#define BLOCK_SIZE 1024

#define M_PI 3.1415926535897932384626433832795
#define  epsilon 1e-4 


// 보이드 구조체

struct Boid
{
	//float3 wallOrigin; // the reference position of the wall (the boid reference frame) on which the boid is 
	//float3  eulerAngles; // the rotation of the boid reference frame
	float3  position; // the position of the  boid in the boid reference frame
	float3  scale;
	float3  headDir; // the head angle of the  boid on the local plane: from 0 to 2 *PI
	float speed;            // the speed of a boid

	float  radius; // the radius of a circle boid
	float3 colorHSV;         // HSV color
	float4 colorRGB;         // RGBA color
	float2 soundGrain; //        the freq (pitch) and amp of the boid sound grain
	float duration; //   the duration of the boid for one frame. 
	int   wallNo;    // the number of the wall on which the boid is 
	

};


// 보이드 데이터 버퍼
RWStructuredBuffer<Boid> _BoidBuffer;
RWStructuredBuffer<int> _BoidCountBuffer;

int _BoidsNum;
int _NumOfWalls;

float _DeltaTime;


float _SeparateRadius;
float _SeparateWeight;

float _AlignmentRadius;
float _AlignmentWeight;

float _CohesionRadius;
float _CohesionWeight;

float _GroundFlockingWeight;
float _GroundCirculationWeight;
float _GroundDivergeWeight;



float _CeilingFlockingWeight;
float _CeilingCirculationWeight;
float _CeilingConvergeWeight;


float _GroundMinHue;
float _GroundMaxHue;
float _GroundMinSaturation;
float _GroundMaxSaturation;
float _GroundMinValue;
float _GroundMaxValue;

float _GroundMinAlpha;
float _GroundMaxAlpha;

float _CeilingMinHue;
float _CeilingMaxHue;
float _CeilingMinSaturation;
float _CeilingMaxSaturation;
float _CeilingMinValue;
float _CeilingMaxValue;

float _CeilingMinAlpha;
float _CeilingMaxAlpha;




float3 _GroundMaxCorner;
float3 _GroundMinCorner;

float3 _CeilingMaxCorner;
float3 _CeilingMinCorner;

float _GroundRadius;
float _CeilingRadius;

float _CeilingInnerRadius;

float _GroundPlaneDepth, _CeilingPlaneDepth;


float _MinSpeed, _MaxSpeed;

float _ScaleFactor;
float _SpeedFactor;
//float _ScaleFactor;


float3 ClampRadius(float3 pos,  float minRadius, float maxRadius)
{
	return  float3( clamp( pos[0], minRadius, maxRadius),
		clamp(pos[1], minRadius, maxRadius), clamp( pos[1], minRadius, maxRadius) );
}

// find angle theta such that normalized vec = (cos(theta), sin(theta))
// atan: Arctangent of x in range [-π/2, π/2].

// atan2(y,x): Arctangent of y/x in range [-π, π].

//this.getAngle = function(){
//var angle = Math.atan2(this.y, this.x);   //radians
//										  // you need to devide by PI, and MULTIPLY by 180:
//var degrees = 180 * angle / Math.PI;  //degrees
//return (360 + Math.round(degrees)) % 360; //round 
// https://msdn.microsoft.com/ko-kr/library/system.math.atan2(v=vs.110).aspx

float findAngleForVector( float3 vec)
{
	
	// get the ground perpencular projection of vec along y axis
		float theta = atan2(vec.z, vec.x); // theta ranges (0,pi) or (0 -pi)

		if (theta < 0) { // negative theta means that vec (x,y) is in 3rd or 4th quadrant, measuring in the clockwise direction
			return (2 * M_PI + theta); // angle measured in the counterclockwise direction
		}
		else {
			return theta;
		}
	
}


float3 findDirVectorForAngle(float  angle)
{
	return float3( cos(angle), 0.0, sin(angle) );
	
}


float3 findUnitVectorOrthoTo(float3 vec)
{
	//float3 yVec, xzVec;

	//if (vec.y == 0.0)
	//{
	//	xzVec = vec;
	//}// 2D vector 
	//else
	//{ // 3D Vector
	//	yVec = dot(vec, float3(0, 1, 0)); // projection on the y axis
	//	xzVec = vec - yVec;
	//}


	
		// find (x,y) such that (x,y) * (a,b) = 0, and x^2 + y^2 =1

		//float x = sqrt(b*b / (a*a + b * b)); // choose the positive x; it is arbitrary
		//float y = -x * a / b;

		//float x = sqrt( xzVec.z*  xzVec.z / ( xzVec.x* xzVec.x + xzVec.z * xzVec.z));

		//// choose the positive x; it is arbitrary
		//float y = -x * xzVec.x / xzVec.z;

		float x = sqrt( vec.z *  vec.z / ( vec.x* vec.x + vec.z * vec.z));

		//// choose the positive x; it is arbitrary
		//float y = -x * xzVec.x / xzVec.z;

		float y = -x * vec.x / vec.z;
		return float3(x, 0, y);
	
		
}


//\param fR Red component, used as output, range: [0, 1]

//\param fG Green component, used as output, range: [0, 1]

//\param fB Blue component, used as output, range: [0, 1]

//\param fH Hue component, used as input, range: [0, 1] => changed to [0,360] at the beginning

//\param fS Hue component, used as input, range: [0, 1]

//\param fV Hue component, used as input, range: [0, 1]

float3 HSVtoRGB(float fH, float fS, float fV)
{
    float fR, fG, fB;
	
	float fHdeg = fH * 360;

	float fC = fV * fS; // Chroma

	float fHPrime = fmod(fHdeg / 60.0, 6);

	float fX = fC * (1 - abs(fmod(fHPrime, 2) - 1));

	float fM = fV - fC;



	if (0 <= fHPrime && fHPrime < 1) 
	{

		fR = fC;

		fG = fX;

		fB = 0;

	}
	else 
		if (1 <= fHPrime && fHPrime < 2) 
		{

		fR = fX;

		fG = fC;

		fB = 0;

	    }
	else 
		if (2 <= fHPrime && fHPrime < 3)
		{

		fR = 0;

		fG = fC;

		fB = fX;

	    }
	else if (3 <= fHPrime && fHPrime < 4) 
	{

		fR = 0;

		fG = fX;

		fB = fC;

	}
	else if (4 <= fHPrime && fHPrime < 5) 
	{

		fR = fX;

		fG = 0;

		fB = fC;

	}
	else if (5 <= fHPrime && fHPrime < 6) 
	{

		fR = fC;

		fG = 0;

		fB = fX;

	}
	else {

		fR = 0;

		fG = 0;

		fB = 0;

	}



	fR += fM;

	fG += fM;

	fB += fM;

	return  float3(fR, fG, fB);

} // HSVtorgb




  // determine the color of the boid according to the motion state (angle, radius, speed) of the boid,
  // radius is the length of pBoid.position
  // We use  HSV color model. The hue angle on the hue circle corresponds to the position of the boid relative to the x axis
  // This represents the variety of the boids. We use the saturation to represent the speed of the boid; the speed corresponds to the 
  // vividness, which corresponds to the saturation of the color.
  // The value/lightness corresponds to the radius of the boid from the center. 


// Compute the HSV color of the boid and convert it to RGB color
void computeBoidColor(inout Boid pBoid) 
{


	float f, h, s, v, distFromBound, distFromCenter, alpha;
	float3 HSV;
	float ang;

	if ( pBoid.wallNo == 0) // ground
	{
		

		ang = findAngleForVector(pBoid.position) / (2 * M_PI); // convert the angle (in radian) to the value between 0 and 1

		if (ang < 0.5)
		{
			f = ang * 2.0;
			h = lerp( _GroundMinHue, _GroundMaxHue, f);
		}
		else
		{
			f = 2 * ang - 1.0;
			h = lerp(  _GroundMaxHue, _GroundMinHue, f);

		}

		// change to the range  of h which may be negative to the range  (0,1)

		if (h < 0)
		{
			h = h + 1;
		}

		//h = h * 360.0; // hue in the degree range ??? (different from Unity API, where h,s,v are from 0 to 1 )

		//lerp(a, b, f)
		

		distFromBound = _GroundRadius - length(pBoid.position);
		
		 f = clamp(distFromBound / _GroundRadius, 0.0, 1.0);

		 s = lerp(_GroundMinSaturation, _GroundMaxSaturation, f);

		 v = lerp( _GroundMinValue, _GroundMaxValue,  f);

		 alpha = lerp(_GroundMinAlpha, _GroundMaxAlpha, f);



		// HSV = float3(h, s, v);
		 pBoid.colorHSV = float3(h, s, v);

		 pBoid.colorRGB = float4( HSVtoRGB(h, s, v), alpha);

        //pBoid.color = float4(HSV2RGB(HSV), alpha);		
		//pBoid.color = float4(HSV, alpha);

		return;

	}

	if (pBoid.wallNo == 1) // ceiling
	{
		ang = findAngleForVector(pBoid.position) / (2 * M_PI); // convert the angle (in radian) to the value between 0 and 1

		if (ang < 0.5)
		{
			f = ang * 2.0;
			h = lerp(_CeilingMinHue,  _CeilingMaxHue, f);
		}
		else
		{
			f = 2 * ang - 1.0;
			h = lerp( _CeilingMaxHue, _CeilingMinHue, f);

		}

		// change to the range  of h which may be negative to the range  (0,1)

		if (h < 0)
		{
			h = h + 1;
		}
		//h = h * 360.0; // hue in the degree range


		//h = lerp( 360.0 * _CeilingMinHue, 360.0 * _CeilingMaxHue, h); // reduce the Hue in range [0,1]to [_GroundMinHue, _GroundMaxHue]

		
		//s = lerp(_CeilingMinSaturation, _CeilingMaxSaturation, pBoid.speed / _MaxSpeed); // pBoid.speed is already between _MinSpeed and _MaxSpeed
																							

		distFromCenter  =  length(pBoid.position);

		f = clamp( distFromCenter / _CeilingRadius, 0.0, 1.0);
		s = lerp(_CeilingMinSaturation, _CeilingMaxSaturation, f );

		v = lerp(_CeilingMinValue, _CeilingMaxValue, f);

		alpha = lerp(_CeilingMinAlpha, _CeilingMaxAlpha, f);

		//HSV = float3(h, s, v);

		//pBoid.color = float4(HSV2RGB(HSV), alpha);

		pBoid.colorHSV = float3(h, s, v);

		pBoid.colorRGB = float4( HSVtoRGB(h, s, v), alpha);

		return;

	}

	

}// void computeBoidColor(Boid pBoid)



//POSTPROCESSING

// Check if the boid escapes from its domain wall. Apply an appropriate action to the boid if so.

//NOTE: On each wall, the boid position is represented by two coordinates pBoid.position.x and pBoid.position.z;

void postProcessBoidState( float3 prevPos, inout Boid pBoid)
{

	if (pBoid.wallNo == 0)
	{ // boid is on the ground with pBoid.position with  = GroundMinCorner.y = 0

	  // check if the boid escapes from the lower or top edges

	
	 // (1) check if the boid is outside of the right/left/front/back sides (horizontal bounds)  of the ground
	  //  => ENTER  the ceiling wall
		
		if (pBoid.position.x > _GroundMaxCorner.x)
		{ // outside of the right boundary of the ground			

			//if (pBoid.position.z > _GroundMaxCorner.z) // outside of the front boundary of the ground
			//{ // go back to the  the ground

			//	pBoid.position.z = _GroundMaxCorner.z - (pBoid.position.z - _GroundMaxCorner.z + epsilon);

			//}

			//if (pBoid.position.z < _GroundMinCorner.z) // outside of the back boundary of the ground
			//{ // go back through the back boundary of the ground

			//	pBoid.position.z = _GroundMinCorner.z + (_GroundMinCorner.z - pBoid.position.z + epsilon);

			//}

			// boid within the front and the back boundary of the ground, but outside of the right boundary of the ground
			// => enter the ceiling at the right end

			// check if the number of boids in the current wall (ground) is less than the limit.
			// Then do not enter the ceiling, but go back the ground domain


			//if (_BoidCountBuffer[pBoid.wallNo] < (int) (_RatioOfWalls * _BoidsNum ) )
			//{ //  (pBoid.position.x > _GroundMaxCorner.x)
			//
			//	//	pBoid.position.x = _GroundMaxCorner.x - (pBoid.position.x - _GroundMaxCorner.x + epsilon);
			//		
			//	  // Reverse the head direction of the boid in order to go back to the ground domain

			//	    pBoid.headDir = -pBoid.headDir;
			//	
			//}
			//else
			//{ // enter the ceiling

			
				

				// To enter the ceiling, reverse the head direction of the boid.


				//pBoid.headDir = -pBoid.headDir;
				pBoid.headDir = -normalize(pBoid.position);
				pBoid.speed = _MaxSpeed;
				//pBoid.position =  prevPos + pBoid.speed * pBoid.headDir * _DeltaTime;

				pBoid.wallNo = 1; // direct enterance to the ceiling in the right direction
				// covert the head dir  to the ceiling frame where the z axis is opposite to the Z axis in the
				// ground frame. 

				pBoid.headDir.z = -pBoid.headDir.z;

				pBoid.position.z = -pBoid.position.z; // the positive z in the ground frame becomes the negative z in the
													  // ceiling frame. The z directions are opposite in both frames

													  //float deviation = pBoid.position.x - _GroundMaxCorner.x; // the deviation in the positive x direction

													  //pBoid.position.z = _GroundMinCorner.y + (deviation + epsilon);

													  //pBoid.position.x = _CeilingMaxCorner.x - (deviation + epsilon); // direct entrance to the ceiling

			//}
			return;

		}//if (pBoid.position.x > _GroundMaxCorner.x)


		if (pBoid.position.x < _GroundMinCorner.x)  //
		{ // outside of the left boundary of the ground



			//if (pBoid.position.z > _GroundMaxCorner.z) // outside of the front boundary of the ground
			//{ // go back through the front boundary of the ground

			//	pBoid.position.z = _GroundMaxCorner.z - (pBoid.position.z - _GroundMaxCorner.z + epsilon);

			//}

			//if (pBoid.position.z < _GroundMinCorner.z)  // outside of the back boundary of the ground
			//{  // go back through the back boundary of the ground

			//	pBoid.position.z = _GroundMinCorner.z + (_GroundMinCorner.z - pBoid.position.z + epsilon);

			//}
			
			// check if the number of boids in the current wall (ground) is less than the limit.
			// Then do not enter the ceiling, but go back the ground domain


			//if (_BoidCountBuffer[pBoid.wallNo] < (int) (_RatioOfWalls * _BoidsNum) )
			//{ //  (pBoid.position.x < _GroundMinCorner.x)

			//	//pBoid.position.x = _GroundMinCorner.x + (_GroundMinCorner.x - pBoid.position.x + epsilon);

			//	// Reverse the head direction of the boid in order to go back to the ground domain

			//	pBoid.headDir = -pBoid.headDir;

			//}
			//else

			//{
				


				// Reverse the head  direction of the boid

		   // pBoid.headDir = -pBoid.headDir;
			pBoid.headDir = -normalize(pBoid.position);


			//pBoid.headDir = -normalize(pBoid.position);
			pBoid.speed = _MaxSpeed;

			//pBoid.position = prevPos + pBoid.speed * pBoid.headDir * _DeltaTime;

				pBoid.wallNo = 1; // direct entrance to the ceiling in the left direction
				// covert the head dir  to the ceiling frame where the Z axis is opposite to the Z axis in the
				  // ground frame. 

				pBoid.headDir.z = -pBoid.headDir.z;


				pBoid.position.z = -pBoid.position.z; // the positive z in the gound frame becomes the negative z in the
													  // ceiling frame. The z directions are opposite in both frames

													  //float deviation = _GroundMinCorner.x - pBoid.position.x; // the deviation in the negative x direction


													  //pBoid.position.x = _CeilingMinCorner.x + (deviation + epsilon); // direct transfer to the ceiling


				// pBoid.headAngle is always positive between 0 and 2 *M_PI
			//}

			
			return;

		}  // if (pBoid.position.x <  _GroundMinCorner.x)


		// pBoid.position.x is between _GroundMinCorner.x and _GroundMaxCorner.z

		if (pBoid.position.z > _GroundMaxCorner.z)
		{ // outside of the front boundary the ground domain;
		// but not outside of the right or left boundary of the ground domain;
		// these cases are handled in the preceeding paragraph

		// check if the number of boids in the current wall (ground) is less than the limit.
		// Then do not enter the ceiling, but go back the ground domain


			//if (_BoidCountBuffer[pBoid.wallNo] < (int) (_RatioOfWalls * _BoidsNum) )
			//{ //  (pBoid.position.z > _GroundMinCorner.z)

			//	//pBoid.position.z = _GroundMaxCorner.z - (pBoid.position.z - _GroundMaxCorner.z  + epsilon);

			//	// Reverse the head direction of the boid in order to go back to the ground domain

			//	pBoid.headDir = -pBoid.headDir;

			//}
			//else
			//{
				


				
				// Reverse the head  direction of the boid

			//pBoid.headDir = -pBoid.headDir;
			 pBoid.headDir = -normalize(pBoid.position);
				// covert the head dir  to the ceiling frame where the Z axis is opposite to the Z axis in the
				// ground frame. 

			//pBoid.headDir = -normalize(pBoid.position);
			pBoid.speed = _MaxSpeed;

			//pBoid.position = prevPos + pBoid.speed * pBoid.headDir * _DeltaTime;

				pBoid.wallNo = 1; // direct transfer to the ceiling to the front direction
				pBoid.headDir.z = -pBoid.headDir.z;

				//float deviation = pBoid.position.z - _GroundMaxCorner.z; // deivation in the z direction

				//pBoid.position.z = _CeilingMaxCorner.z - (deviation + epsilon);

				pBoid.position.z = -pBoid.position.z; // the positive z in the gound frame becomes the negative z in the
													  // ceiling frame. The z directions are opposite in both frames

			//}
			return;


		}//if ( pBoid.position.z < _GroundMaxCorner.z )


		// check if the boid is outside of the back boundary  of the ground wall => go back to the original domain because there is no vertical wall
		if (pBoid.position.z < _GroundMinCorner.z)
		{

			// check if the number of boids in the current wall (ground) is less than the limit.
			// Then do not enter the ceiling, but go back the ground domain


			//if (_BoidCountBuffer[pBoid.wallNo] <  (int) (_RatioOfWalls * _BoidsNum) )
			//{ //  (pBoid.position.z < _GroundMinCorner.z)

			//	//pBoid.position.z = _GroundMinCorner.z +  (_GroundMinCorner.z - pBoid.position.z  + epsilon);

			//	// Reverse the head direction of the boid in order to go back to the ground domain

			//	pBoid.headDir = -pBoid.headDir;

			//}
			//else
			//{
						

				
				// Reverse the head  direction of the boid

			//pBoid.headDir = -pBoid.headDir;
			 pBoid.headDir = -normalize(pBoid.position);
				// covert the head dir  to the ceiling frame where the Z axis is opposite to the Z axis in the
				// ground frame. 


			//pBoid.headDir = -normalize(pBoid.position);
			pBoid.speed = _MaxSpeed;

			//pBoid.position = prevPos + pBoid.speed * pBoid.headDir * _DeltaTime;

				pBoid.wallNo = 1; // direct transfer to the ceiling to the back direction				
				pBoid.headDir.z = -pBoid.headDir.z;

				//float deviation = _GroundMinCorner.z - pBoid.position.z; // deivation in the z direction

				// pBoid.position.x does not change in the direct tansfer to the ceiling at the back end

				//pBoid.position.z = _CeilingMinCorner.z + (deviation + epsilon);

				pBoid.position.z = -pBoid.position.z; // the positive z in the gound frame becomes the negative z in the
													  // ceiling frame. The z directions are opposite in both frames
				//// The y and x components of the boid does not change when going to the ceiling


			//}
			
			return;

		} //	if (pBoid.position.z < _GroundMinCorner.z)
		
		  // (2) check if the boid is  outside  of the vertial bounds => go back to the ground domain

		if ( pBoid.position.y > _GroundPlaneDepth || pBoid.position.y < 0.0)
		{

			// Reverse the head direction of the boid in order to go back to the ground domain

		    //pBoid.headDir = -pBoid.headDir;
			pBoid.headDir = -normalize(pBoid.position); // go toward the origin/center of
			// the ground plane domain

			//pBoid.headDir = -normalize(pBoid.position);
			pBoid.speed = _MaxSpeed;

			//pBoid.position = prevPos + pBoid.speed * pBoid.headDir * _DeltaTime;
			return;


		}

		//otherwise ( boid is inside the ground  domain), no postprocessing.
		
		return;

	} // boid is on the ground domain

	//POSTPROCESSING for the Ceiling

	if (pBoid.wallNo == 1)
	{ // boid is on the ceiling  wall
	// pBoid.position.y is fixed to _CeilingMaxCorner.y


	// (1) check if the boid is inside the rectangular CelingHole = > enter the ground wall through the GroundHole

		if (length(pBoid.position) < _CeilingInnerRadius)
		{
			// check if the number of boids in the current wall (ground) is less than the limit.
			// Then do not enter the ceiling, but go back the ground domain


			//if (_boidcountbuffer[pboid.wallno] < (int) ( _ratioofwalls * _boidsnum) )
			//{ 			
			//	pboid.headdir = -pboid.headdir;
			//return;		
			//}
			//else
			//{



			// Convert the position and direction coordinates of the boid to the
			// ground frame where the z axis is opposite to that of the ceiling frame. 
			pBoid.wallNo = 0; // enter the ground  wall
			pBoid.position.z = -pBoid.position.z;

			// the head boid direction is the same but the coordinates are transformed to the ground frame.
			pBoid.headDir.z = -pBoid.headDir.z;

			// The y component of the boid does not change when going to the ground
			return;

			//}
		}

	// (2) check if the boid is  outside  of the ceiling => go back to the ceiling domain

		if (pBoid.position.x > _CeilingMaxCorner.x || pBoid.position.x < _CeilingMinCorner.x ||
			pBoid.position.z < _CeilingMinCorner.z || pBoid.position.z > _CeilingMaxCorner.z
			|| pBoid.position.y > _CeilingPlaneDepth || pBoid.position.y <  0.0)
		{

			// Reverse the head direction of the boid in order to go back to the ceiling domain

			//pBoid.headDir = -pBoid.headDir;	

			pBoid.headDir = -normalize(pBoid.position);
			pBoid.speed = _MaxSpeed;

			//pBoid.position = prevPos + pBoid.speed * pBoid.headDir * _DeltaTime;


			//pBoid.headDir = -normalize(pBoid.position); // go toward the origin/center of
			return;


		

		} // boid insdie of CeilingHole: 

		
		

		

	  // no postprocessing => boids, go ahead
		return;

	} // boid is on the ceiling

	return;

} // postProcessBoidState()


// Use a single boid buffer for the ceiling and the ground, 
// but use a flag to indicate whether the boid is on the ground or on the ceiling

//https://msdn.microsoft.com/ko-kr/library/windows/desktop/ff471442(v=vs.85).aspx
[numthreads(BLOCK_SIZE , 1,1)]
void SimulateCSCeiling(uint3 DTid : SV_DispatchThreadID)
{
	// Process a SINGLE Boid refered to by DTid.x

    const int pId = DTid.x;

    Boid pBoid = _BoidBuffer[pId];    // Field values of the _BoidBuffer structures are copied to pBoid??
   
    
    int sepCnt = 0;
    int aliCnt = 0;
    int cohCnt = 0;
	
	  
	float3 sepVecSum = (float3)0.0;
	float3 avgSepVec = (float3)0.0;
	
	float3 cohPosSum = (float3)0.0;
	float3 avgCohPos = (float3)0.0;
	float3 avgCohVec = (float3)0.0;
		
	float3 alignVecSum = (float3)0.0;

	float3 avgAlignVec = (float3)0.0;

		
	float3 sepDir = (float3)0.0; // the unit direction for separation
	float3 alignDir = (float3)0.0;  // unit direction for alignment
	float3 cohesionDir = (float3)0.0; // unit direction for cohesion

	float3 flockingHeadDir = (float3)0.0; // the head direction of the boid considering the neighbor flock
	float3 circulationDir = (float3)0.0;
	float3 goalSeekingDir = (float3)0.0;

	float flockingWeight = (float)0.0;
	float circulationWeight = (float)0.0;
	float goalSeekingWeight = (float)0.0;


	float deviation;

	float weight, dist;
	float3 diffVec;


	// apply three boid rules using neighbors

	if ( pBoid.wallNo == 1) // the boid is in the ground domain or the ceiling
	{

		 
		for (int nId = 0; nId < _BoidsNum; nId++)
		{
			//if (nId == pId) continue; // go to the next iteration

			Boid nBoid = _BoidBuffer[nId];

			if (pBoid.wallNo != nBoid.wallNo) continue;  // consider only the boids on the same wall as the current pBoid

			diffVec = pBoid.position - nBoid.position; // the boid's position is (x,0,z) in  the wall  frame for the boid
			dist = length(diffVec);


			// check if the boid nBoid is a neighbor of the current boid pBoid for separation action

			if (dist <= _SeparateRadius)

			{
				weight = smoothstep(0.0, _SeparateRadius, dist); // smoothstep(x, a,b) clamps x between  a and b?
				//x is clamped to the range [min,
				//max] and then the interpolation formula is evaluated :
				//-2 * ((x - min) / (max - min))3 + 3 * ((x - min) / (max - min))2

				if (weight < epsilon)
				{
					weight = epsilon; // avoid too small a number for division
				}

				sepVecSum += diffVec / weight; // sum  diffVec's to compute the average sepration vector
				sepCnt++;          // increament the separation neighor count
			}

			// check if the boid nBoid is a neighbor of the current boid pBoid for alignment action
			if (dist <= _AlignmentRadius)
			{
				// treat the directions and the speeds of the boids separately.
				// => This is not physically correct, for artistic purposes it is OK.

				alignVecSum += nBoid.speed * nBoid.headDir; // sum  the direction angles to compute the average direction angle
				  // sum the speed to compute the average speed
				aliCnt++;
			}

			// check if the boid nBoid is a neighbor of the curernt boid for cohesion action
			if (dist <= _CohesionRadius)
			{
				cohPosSum += nBoid.position; // sum the neighbor boid positions to compute the cohesion center position
				cohCnt++;
			}


		} //  for(int nId = 0; nId < _BoidsNum; nId++)

	 // find the average separation vector  to achieve the average separation
		if (sepCnt != 0) // This condition holds only for boids on the ground or the ceiling
		{
			avgSepVec = sepVecSum / sepCnt;
			// avgSepVec is big enough so that the zero length issue can be ignored
			//sepDir = normalize(avgSepVec); // the unit direction for separation
		} // for separation


	 // find the cohesion center position => Find the direction angle change to steer toward the cohesion center
		if (cohCnt != 0) // This condition holds only for boids on the ground or the ceiling
		{
			avgCohPos = cohPosSum / cohCnt;

			avgCohVec = avgCohPos - pBoid.position;

			//cohesionDir = normalize(avgCohVec);
			

		} // for coherence

	 // find the direction angle difference and  speed difference for the alignment  of the current boid

		if (aliCnt != 0) // This condition holds only for boids on the ground or the ceiling
		{
			avgAlignVec = alignVecSum / aliCnt;
			//avgSpeedAlign = length(avgVecAlign);
			//alignDir = normalize( avgVecAlign ); // unit direction for alignment
		} // 

		
		 // Consider all the desired components of the motion according to their weights

		
		float3 flockingHeadVec = avgSepVec  * _SeparateWeight + avgCohVec  * _CohesionWeight +
			             avgAlignVec  * _AlignmentWeight;
		
		/*if (length(flockingHeadVec) < epsilon)
		{
			flockingHeadDir = normalize(flockingHeadVec + epsilon); 
		}
		else*/
		{
			flockingHeadDir = normalize(flockingHeadVec);
		}
			
	 //  apply two additional rules:
	 // (1) circulation action rule and (2) the diverge  seeking action rule

	 // Circulation Action: if the boid is on the ground or the ceiling, it tries to circulate about the center of the gournd or the ceiling

	 // Goal Seeking Action: Diverge or Converge Action: (1) if the boid is on the ground (wallNo ==0), it tries to move away from the center of the ground
	 // (2) if the boid on the ceiling (wallNo ==1), it tries to move toward the center of the ceiling

		float currHeadAngle;
		float circulationAngle;

		//if (length(pBoid.position) < epsilon)
		//{
		//	currHeadAngle  = findAngleForVector( epsilon + pBoid.position );
		//}
		//
		//else
		{
			currHeadAngle = findAngleForVector(pBoid.position);
		}

			circulationAngle = currHeadAngle + M_PI / 2.0;
			//circulationDir = findUnitVectorOrthoTo( pBoid.position );
			circulationDir = findDirVectorForAngle(circulationAngle);
		
		
		// Apply the goal seeking action: diverge  (in the ground) or converge action ( in the ceiling).
				
	
			
				goalSeekingWeight = _CeilingConvergeWeight;

				flockingWeight = _CeilingFlockingWeight;
				circulationWeight = _CeilingCirculationWeight;


				/*if (length(pBoid.position) < epsilon)
				{
					goalSeekingDir = normalize(epsilon + pBoid.position);
				}
				else*/
				{

					goalSeekingDir = normalize(-pBoid.position);  // converge goal seeking dir

				}



	
		 
		float3 pNewHeadVec = flockingHeadDir * flockingWeight 
			               + circulationDir * circulationWeight + goalSeekingDir * goalSeekingWeight;

		
		
		// compute the new position of pBoid

		pBoid.duration = _DeltaTime;
			
		pBoid.headDir =  normalize(pNewHeadVec);
		
		pBoid.speed = _SpeedFactor * length( pNewHeadVec );

		pBoid.speed = clamp(pBoid.speed, _MinSpeed, _MaxSpeed);
		
	 // ipdate the position

			
		float3 pNewVel = pBoid.speed  * pBoid.headDir;
		
		//pBoid.position += pNewVel * _SpeedFactor * pBoid.duration;

		float3 prevPos = pBoid.position;

		pBoid.position += pNewVel *  pBoid.duration;
		

		pBoid.scale = pBoid.scale  * _ScaleFactor;

		computeBoidColor( pBoid); // both HSV and RBG colors
						
		postProcessBoidState(prevPos, pBoid);

		_BoidBuffer[pId] = pBoid; // copy the new Boid to the original structure _BoidBuffer[pid]
		return;
	} // 	if (pBoid.wallNo  1) 


	//To pass a modifiable function parameter in C, the programmer must
	//	explicitly use pointers.C++ provides a built‐in pass‐by‐reference mechanism
	//	that avoids the need to explicitly use pointers, but this mechanism still
	//	implicitly assumes that the hardware supports pointers.
	
	//Cg must use a different mechanism because the vertex and fragment hardware of the GPU
	//	does not support the use of pointers.
	
	//Cg passes modifiable function parameters by value‐result, instead of by reference.
	//The difference between these two methods is subtle; it is only apparent when two function
	//	parameters are aliased by a function call.In Cg, the two parameters have
	//	separate storage in the function, whereas in C++ they would share storage.
	//	To reinforce this distinction, Cg uses a different syntax than C++ to declare
	//	function parameters that are modified :
	//function blah1(out float x); // x is output-only
	//function blah2(inout float x); // x is input and output
	//function blah3(in float x); // x is input-only
	//function blah4(float x); // x is input-only (default, as in
	//C)

	return;
} // SimulateCSCeiling()


  // Use a single boid buffer for the ceiling and the ground, 
  // but use a flag to indicate whether the boid is on the ground or on the ceiling

  //https://msdn.microsoft.com/ko-kr/library/windows/desktop/ff471442(v=vs.85).aspx
[numthreads(BLOCK_SIZE, 1, 1)]
void SimulateCSGround(uint3 DTid : SV_DispatchThreadID)
{
	// Process a SINGLE Boid refered to by DTid.x

	const int pId = DTid.x;

	Boid pBoid = _BoidBuffer[pId];


	int sepCnt = 0;
	int aliCnt = 0;
	int cohCnt = 0;


	float3 sepVecSum = (float3)0.0;
	float3 avgSepVec = (float3)0.0;

	float3 cohPosSum = (float3)0.0;
	float3 avgCohPos = (float3)0.0;
	float3 avgCohVec = (float3)0.0;

	float3 alignVecSum = (float3)0.0;

	float3 avgAlignVec = (float3)0.0;


	float3 sepDir = (float3)0.0; // the unit direction for separation
	float3 alignDir = (float3)0.0;  // unit direction for alignment
	float3 cohesionDir = (float3)0.0; // unit direction for cohesion

	float3 flockingHeadDir = (float3)0.0; // the head direction of the boid considering the neighbor flock
	float3 circulationDir = (float3)0.0;
	float3 goalSeekingDir = (float3)0.0;

	float flockingWeight = (float)0.0;
	float circulationWeight = (float)0.0;
	float goalSeekingWeight = (float)0.0;


	float deviation;

	float weight, dist;
	float3 diffVec;


	// apply three boid rules using neighbors

	if (pBoid.wallNo == 0) // the boid is in the ground domain or the ceiling
	{


		for (int nId = 0; nId < _BoidsNum; nId++)
		{
			//if (nId == pId) continue; // go to the next iteration

			Boid nBoid = _BoidBuffer[nId];

			if (pBoid.wallNo != nBoid.wallNo) continue;  // consider only the boids on the same wall as the current pBoid

			diffVec = pBoid.position - nBoid.position; // the boid's position is (x,0,z) in  the wall  frame for the boid
			dist = length(diffVec);


			// check if the boid nBoid is a neighbor of the current boid pBoid for separation action

			if (dist <= _SeparateRadius)

			{
				weight = smoothstep(0.0, _SeparateRadius, dist); // smoothstep(x, a,b) clamps x between  a and b?
																 //x is clamped to the range [min,
																 //max] and then the interpolation formula is evaluated :
																 //-2 * ((x - min) / (max - min))3 + 3 * ((x - min) / (max - min))2

				if (weight < epsilon)
				{
					weight = epsilon; // avoid too small a number for division
				}

				sepVecSum += diffVec / weight; // sum  diffVec's to compute the average sepration vector
				sepCnt++;          // increament the separation neighor count
			}

			// check if the boid nBoid is a neighbor of the current boid pBoid for alignment action
			if (dist <= _AlignmentRadius)
			{
				// treat the directions and the speeds of the boids separately.
				// => This is not physically correct, for artistic purposes it is OK.

				alignVecSum += nBoid.speed * nBoid.headDir; // sum  the direction angles to compute the average direction angle
															// sum the speed to compute the average speed
				aliCnt++;
			}

			// check if the boid nBoid is a neighbor of the curernt boid for cohesion action
			if (dist <= _CohesionRadius)
			{
				cohPosSum += nBoid.position; // sum the neighbor boid positions to compute the cohesion center position
				cohCnt++;
			}


		} //  for(int nId = 0; nId < _BoidsNum; nId++)

		  // find the average separation vector  to achieve the average separation
		if (sepCnt != 0) // This condition holds only for boids on the ground or the ceiling
		{
			avgSepVec = sepVecSum / sepCnt;
			// avgSepVec is big enough so that the zero length issue can be ignored
			//sepDir = normalize(avgSepVec); // the unit direction for separation
		} // for separation


		  // find the cohesion center position => Find the direction angle change to steer toward the cohesion center
		if (cohCnt != 0) // This condition holds only for boids on the ground or the ceiling
		{
			avgCohPos = cohPosSum / cohCnt;

			avgCohVec = avgCohPos - pBoid.position;

			//cohesionDir = normalize(avgCohVec);


		} // for coherence

		  // find the direction angle difference and  speed difference for the alignment  of the current boid

		if (aliCnt != 0) // This condition holds only for boids on the ground or the ceiling
		{
			avgAlignVec = alignVecSum / aliCnt;
			//avgSpeedAlign = length(avgVecAlign);
			//alignDir = normalize( avgVecAlign ); // unit direction for alignment
		} // 


		  // Consider all the desired components of the motion according to their weights


		float3 flockingHeadVec = avgSepVec * _SeparateWeight + avgCohVec * _CohesionWeight +
			avgAlignVec * _AlignmentWeight;

		/*if (length(flockingHeadVec) < epsilon)
		{
			flockingHeadDir = normalize(flockingHeadVec + epsilon);
		}
		else*/
		{
			flockingHeadDir = normalize(flockingHeadVec);
		}

		//  apply two additional rules:
		// (1) circulation action rule and (2) the diverge  seeking action rule

		// Circulation Action: if the boid is on the ground or the ceiling, it tries to circulate about the center of the gournd or the ceiling

		// Goal Seeking Action: Diverge or Converge Action: (1) if the boid is on the ground (wallNo ==0), it tries to move away from the center of the ground
		// (2) if the boid on the ceiling (wallNo ==1), it tries to move toward the center of the ceiling

		float currHeadAngle;
		float circulationAngle;

		/*if (length(pBoid.position) < epsilon)
		{
			currHeadAngle = findAngleForVector(epsilon + pBoid.position);
		}

		else*/
		{
			currHeadAngle = findAngleForVector(pBoid.position);
		}

		circulationAngle = currHeadAngle + M_PI / 2.0;
		//circulationDir = findUnitVectorOrthoTo( pBoid.position );
		circulationDir = findDirVectorForAngle(circulationAngle);


		// Apply the goal seeking action: diverge  (in the ground) or converge action ( in the ceiling).



		goalSeekingWeight = _GroundDivergeWeight;

		flockingWeight = _GroundFlockingWeight;
		circulationWeight = _GroundCirculationWeight;


		/*if (length(pBoid.position) < epsilon)
		{
			goalSeekingDir = normalize(epsilon + pBoid.position);
		}
		else*/
		{

			goalSeekingDir = normalize(pBoid.position);  // converge goal seeking dir

		}





		float3 pNewHeadVec = flockingHeadDir * flockingWeight
			+ circulationDir * circulationWeight + goalSeekingDir * goalSeekingWeight;



		// compute the new position of pBoid

		pBoid.duration = _DeltaTime;

		pBoid.headDir = normalize(pNewHeadVec);

		pBoid.speed = _SpeedFactor * length(pNewHeadVec);

		pBoid.speed = clamp(pBoid.speed, _MinSpeed, _MaxSpeed);

		// ipdate the position


		float3 pNewVel = pBoid.speed  * pBoid.headDir;

		//pBoid.position += pNewVel * _SpeedFactor * pBoid.duration;

		float3 prevPos = pBoid.position;

		pBoid.position += pNewVel * pBoid.duration;


		pBoid.scale = pBoid.scale  * _ScaleFactor;

		computeBoidColor(pBoid);

		postProcessBoidState(prevPos, pBoid);

		_BoidBuffer[pId] = pBoid;
		return;
	} // 	if (pBoid.wallNo  0) 


	  //To pass a modifiable function parameter in C, the programmer must
	  //	explicitly use pointers.C++ provides a built‐in pass‐by‐reference mechanism
	  //	that avoids the need to explicitly use pointers, but this mechanism still
	  //	implicitly assumes that the hardware supports pointers.

	  //Cg must use a different mechanism because the vertex and fragment hardware of the GPU
	  //	does not support the use of pointers.

	  //Cg passes modifiable function parameters by value‐result, instead of by reference.
	  //The difference between these two methods is subtle; it is only apparent when two function
	  //	parameters are aliased by a function call.In Cg, the two parameters have
	  //	separate storage in the function, whereas in C++ they would share storage.
	  //	To reinforce this distinction, Cg uses a different syntax than C++ to declare
	  //	function parameters that are modified :
	  //function blah1(out float x); // x is output-only
	  //function blah2(inout float x); // x is input and output
	  //function blah3(in float x); // x is input-only
	  //function blah4(float x); // x is input-only (default, as in
	  //C)

	return;
} // SimulateCSGround()



bool withinBound(Boid nBoid)
{
	if (nBoid.wallNo == 0)
	{
		return (nBoid.position.x > _GroundMinCorner.x && nBoid.position.x < _GroundMaxCorner.x
			&& nBoid.position.z > _GroundMinCorner.z && nBoid.position.z < _GroundMaxCorner.z 
			&& nBoid.position.y >=0 && nBoid.position.y <= _GroundPlaneDepth);
		
	}
	else 
	if (nBoid.wallNo == 1)
	{
		return (nBoid.position.x > _CeilingMinCorner.x && nBoid.position.x < _CeilingMaxCorner.x
			&& nBoid.position.z > _CeilingMinCorner.z && nBoid.position.z < _CeilingMaxCorner.z
			&& nBoid.position.y >= 0 && nBoid.position.y <= _CeilingPlaneDepth);
	}

	return false;

} //  withinBound(Boid nBoid)

[numthreads(1, 1, 1)] // one thread in a single thread group
void SimulateCSCountBoids()
{
	// initialize the boids count buffer
	for (int i = 0; i < _NumOfWalls; i++)
	{
		_BoidCountBuffer[i] = 0;
	}

	// count the number of boids in each wall
	for (int wallNo = 0; wallNo < _NumOfWalls; wallNo++)
	{

		for (int nId = 0; nId < _BoidsNum; nId++)
		{

			Boid nBoid = _BoidBuffer[nId];

			if (nBoid.wallNo == wallNo && withinBound( nBoid) )
			{
				_BoidCountBuffer[wallNo]++;
			}
		}
	}
				
			
} //ComputeBoidsOnWall()